/*************************************************************************
 *  Compilation:  javac KdTree.java
 *  Execution:    java KdTree
 *  Dependencies: Point2D.java RectHV.java StdDraw.java
 *
 *  Read points from a file (specified as a command-line argument) and
 *  draw to standard draw. Highlight the closest point to the mouse.
 *
 *  The nearest neighbor according to the brute-force algorithm is drawn
 *  in red; the nearest neighbor using the kd-tree algorithm is drawn in blue.
 *
 *************************************************************************/
import java.util.TreeSet;

public class PointSET {
    private TreeSet<Point2D> points = new TreeSet<Point2D>();
    
    /*
     * @return true if there no points are present in the set.*/
    public boolean isEmpty(){
        return points.size() == 0;
    }
    
    public int size(){
        return points.size();
    }
    
    public void insert(Point2D p){
        points.add(p);
    }
    
    public boolean contains(Point2D p){
        return points.contains(p);
    }
    
    public void draw(){
        for(Point2D p: points)
            p.draw();
    }

    
    public Iterable<Point2D> range(RectHV rect){
       Queue<Point2D> q = new Queue<Point2D>();
       for(Point2D p: points){
           if(rect.contains(p))
               q.enqueue(p);
       } 
        //return all the point inside the rectangle
        return q;
    }
    
    public Point2D nearest(Point2D queryPoint){
        Point2D nearestPoint = points.first();
        double minDist = queryPoint.distanceSquaredTo(points.first());
        double dis = 0 ;
        
        for(Point2D x: points){
            dis = x.distanceSquaredTo(queryPoint);
            if(dis < minDist){
                minDist = dis;
                nearestPoint = x;
            }
        }
        return nearestPoint;
    }
}