package week3;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

import graph.*;
//Mincut has to be <= 20
public class KargerMinCut {
    private int                     vc;         //vertex count
    private int                     value = 1;     //no. of edges in min cut
    private ArrayList<Integer>[]    equalTo;    
    private ArrayList<Edge>         edges;      //list of edges
    private boolean[]               removed;
    private Graph                   cg;
    private int                     u,v;        //remaining two edges
    
    
    public KargerMinCut(Graph g){
        vc = g.V();
        //create a new graph
        this.cg = new Graph(vc);
        for (int i = 0; i < vc; i++) {
            for(int v: g.adj(i))
                if(v > i)
                    cg.addEdge(i, v);
        }
        //initialize
        removed = new boolean[vc];
        edges   = (ArrayList) g.edges();
        equalTo = new ArrayList[vc];
        for (int i = 0; i < vc; i++) {
            equalTo[i] = new ArrayList<Integer>();
        }
        
        
        //begin
        contract();
        vertexRemain();
        cutEdges();
    }
    
    
    /*Randomly select a Edge and contract it.*/
    public void contract(){
        int vertexCount = vc;
        Random r = new Random();
        while(vertexCount > 2){
            
            //select a random edge
            Edge e = (Edge)edges.remove(r.nextInt(vertexCount));
            System.out.println(e);
            //send it to last
            edges.add(e);
            
            //remove u
            int u = e.from();
            int v = e.to();
            if(!removed[u]){
                removed[u] = true;
                
                //merge u 
                equalTo[v].add(u);
                
                //and all those equal to u now also equal to v
                for (int i : equalTo[u]) {
                    equalTo[v].add(i);
                }
                vertexCount--;
            }
            else if(!removed[v]){
                removed[v] = true;
                vertexCount--;
            }
            
            
        }
    }
    
    public void vertexRemain(){
        int count=0;
        for (int i = 0; i < vc; i++) {
            if(removed[i] == false){
                System.out.println(i);
                if(count==0){
                    u = i;
                    count++;
                }    
                else{
                    v = i;
                }
            }
        }
    }
    
    public void cutEdges(){
        //iterate over two set of vertices
        for (int x : equalTo[u]) {
            for(int y : equalTo[v]){
                if(isAdjacent(x, y)){
                    value++;
                }
            }
        }
        System.out.println("MinCut = "+value);
    }
    
    private boolean isAdjacent(int x, int y) {
        for(int t : cg.adj(x)){
            if(t == y)
                return true;
        }
        return false;
    }


    public static void main(String[] args) {
        //get the file
        File file = new File(args[0]);
        Scanner sc = null;
        try {
            sc = new Scanner(file);
        } catch (FileNotFoundException e) {
            System.err.println("File not found!!");;
        }
        
        //read vertex count from file
        int v = Integer.parseInt(sc.nextLine());
        
        //create empty graph
        Graph g = new Graph(v);
        
        //read edges from text and add edges to graph
        while(sc.hasNextLine()){
            //scan a line
            String s = sc.nextLine();
            System.out.println(s);
            //process the line
            Scanner scl = new Scanner(s);
            //scan vertex
            int u = scl.nextInt();
            while(scl.hasNext()){
                v = scl.nextInt();
                //add edge u-v
                g.addEdge(u, v);
            }  
        }
        
        //Find min cut
        KargerMinCut k = new KargerMinCut(g);
    }
}