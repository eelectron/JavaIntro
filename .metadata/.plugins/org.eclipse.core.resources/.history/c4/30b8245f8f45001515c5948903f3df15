package priorityQueue;

import java.util.NoSuchElementException;

import elementarySort.Sort;

public class MaxPQ<T extends Comparable<T>> {
	private T[] pq;
	private int N=0;
	
	//CONSTRUCTOR
	public MaxPQ(int capacity){
		pq=(T[])new Comparable[capacity+1];
	}
	
	//Check status of pq
	public boolean isEmpty(){
		return N==0;
	}
	
	public int size(){
	    return N;
	}
	
	public T max(){
	    if(isEmpty())
	        throw new NoSuchElementException("PQ is empty.");
	    return pq[1];
	}
	//Insert
	public void insert(T x){
	 // double size of array if necessary
        if (N >= pq.length - 1) resize(2 * pq.length);
        
		pq[++N]=x;
		swim(N);				//SWIM UP
	}
	
	// helper function to double the size of the heap array
    private void resize(int capacity) {
        assert capacity > N;
        Object[] temp = new Object[capacity];
        for (int i = 1; i <= N; i++) temp[i] = pq[i];
        pq = (T[])temp;
    }
	
	//Delete MAX
	public T deleteMax(){
		if(isEmpty())
			return null;
		
		T max=pq[1];
		Sort.swap(pq, 1, N);
		N--;
		sink(1);				//SINK UP
		return max;
	}
	
	//Swip up 
	private void swim(int child){
		int parent = child/2;
		
		while(parent >= 1 && Sort.isLess(pq[parent] , pq[child])){
			Sort.swap(pq, parent, child);
			
			//child becomes parent
			child=parent;
			
			//it's parent
			parent = child/2;
		}
	}
	
	//Sink the root to its correct place
	private void sink(int parent){
		while(2*parent<= N){
			int child = 2*parent;
			if(child+1 <= N && Sort.isLess(pq[child], pq[child+1]))
				child++;
			
			//Break from loop if Parent is bigger than child
			if(!Sort.isLess(pq[parent], pq[child]))
				break;
			
			Sort.swap(pq, parent, child);
			parent=child;
		}
	}
}
