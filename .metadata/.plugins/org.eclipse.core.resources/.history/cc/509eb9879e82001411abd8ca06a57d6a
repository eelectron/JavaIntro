package bst;

public class BST<Key extends Comparable<Key>> {
	private Node root;
	
	//NODE
	private class Node{
		private Key key;
		private Value value;
		private Node left;
		private Node right;
	}
	
	//Inserts a Key
	//Ex
	public void put(Key k, Value v){
		//create node
		Node n=new Node();
		n.key = k;
		n.value = v;
		
		if(root == null)
			root = n;
		else{
			Node currentNode = root;
			
			//Find a place 
			while(currentNode != null){
				int cmp = k.compareTo(currentNode.key);
				if(cmp < 0 ){
					if(currentNode.left == null){
						currentNode.left = n;
						break;
					}
					else
						currentNode=currentNode.left;
				}
				else if(cmp > 0){
					if(currentNode.right == null){
						currentNode.right = n;
						break;
					}
					else
						currentNode = currentNode.right;
				}
				else{
					System.out.println("Node already present");
					break;
				}
			}
		}	
	}
	
	//Get a address of Value object back if present in tree otherwise return -1
	public Value get(Key key){
		Node x=root;
		while(x!=null){
			int cmp = key.compareTo(x.key);
			if(cmp < 0)		x = x.left;
			else if(cmp > 0)x = x.right;
			else 			return x.value;
		}
		
		System.out.println("Key not found");
		return null;
	}
	
	//Delete key from tree if present
	
}
