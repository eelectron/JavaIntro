package bst;

public class BST<Key extends Comparable<Key>> {
	private Node root;
	
	//NODE
	private class Node{
		private Key key;
		private Value value;
		private Node left,right;
		private int count;
		public Node(Key key,Value value){
			this.key=key;
			this.value=value;
		}
	}
	
	//Inserts a Key and value associated with it
	//Ex: 12345:["prashant","India","M"]
	public void put(Key k, Value v){
		root = put(root, k, v);
	}
	
	private Node put(Node x, Key k, Value v) {
		if(x==null)
			return new Node(k,v);
		int cmp=k.compareTo(x.key);
		if(cmp < 0 )	x.left = put(x.left, k, v);
		else if(cmp > 0)x.right = put(x.right, k, v);
		else 			x.value = v;
		x.count = 1 + size(x.left) + size(x.right);
		return x;
	}

	//Get a address of Value object back if present in tree otherwise return -1
	public Value get(Key key){
		Node x=root;
		while(x!=null){
			int cmp = key.compareTo(x.key);
			if(cmp < 0)		x = x.left;
			else if(cmp > 0)x = x.right;
			else 			return x.value;
		}
		System.out.println("Key not found");
		return null;
	}
	
	//Gets floor of key ie key <= to given key
	public Value floor(Key key){
		
		return floor(root, key);
	}
	
	private Value floor(Node n, Key k){
		//Return null if there is nothing in tree
		if(n==null)return null;
		
		//compare the key with Node's key
		int cmp=k.compareTo(n.key);
		
		if(cmp==0)return n.value;
		else if(cmp < 0)return floor(n.left, k);
		
		Value v=floor(n.right, k);
		if(v == null)return n.value;
		else return v;
		
	}
	
	//FIND MINIMUM KEY IN TREE
	public Node min(){
		return min(root);
	}
	
	private Node min(Node n) {
		if(n==null)return null;
		
		//get min of left subtree
		Node v=min(n.left);
		
		//If nothing return from left subtree then return current node's value else return v
		if(v==null)	return n;
		else 		return v;
	}
	
	//FIND MAX KEY IN TREE
	public Node max(){
		return max(root);
	}
	private Node max(Node node) {
		if(node==null)return null;
		
		Node v=max(node.right);
		if(v==null)	return node;
		else 		return v;
	}

	//Deletes key
	public void delete(Key key){
		
	}
}
