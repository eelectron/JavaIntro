import java.util.Arrays;

/*************************************************************************
 * Name: Prashant Singh
 * Email: prashantfromindia@gmail.com
 *
 * Compilation:  javac Fast.java
 * Execution:	 java Fast rs1423.txt	
 * Dependencies: Point.java,StdDraw.java
 *
 * Description: This program finds collinear points among a given set of N points
 * and print them on screen.Its worst case running time is O(N^2logN).
 *
 *************************************************************************/

public class Fast {
	private Point[] points;
	private Point[] pointsHelper;
	private int pointCount;
	private Point[] visitedPoints;  		//mark visited points
	private int vp = 0;						//count visited points
	public static void main(String[] args) {
		Fast f = new Fast();
		// rescale coordinates and turn on animation mode
		StdDraw.setXscale(0, 32768);
		StdDraw.setYscale(0, 32768);
		StdDraw.show(0);

		f.init(args[0]);			//initialize points[] array with points 
		f.start();		

		StdDraw.show(0); 			// display all points on screen
	}

	/*
	 * Reads all the points from given text file and initialize the points[].
	 */
	private void init(String fileName) {
		In in = new In(fileName); 		// read x,y from file
		pointCount = in.readInt(); 		// total points
		points = new Point[pointCount]; // stores all points
		visitedPoints = new Point[pointCount];
		pointsHelper = new Point[pointCount];
		for (int i = 0; i < points.length; i++) {
			int x = in.readInt();
			int y = in.readInt();
			points[i] = new Point(x, y);
			pointsHelper[i] = new Point(x, y);
			
			//draw every point on screen 
			points[i].draw();
		} 			
	}
	
	/*
	 * Start finding collinear points to each point in points[].
	 * This method uses Arrays.sort() whose O(NlogN) unlike Insertion.sort()
	 * whose O(N^2).*/
	private void start() {
		for (int i = 0; i < points.length; i++) {
			if(!isVisited(points[i])){
				Arrays.sort(pointsHelper, points[i].SLOPE_ORDER); 	//sort pointshelper based on slope with points[i] 
				// find points collinear to points[i]
				collinearToRefPoint(points[i], pointsHelper);
			}
			
		}
	}
	
	/*
	 * @return true if given point is already considered.
	 * */
	private boolean isVisited(Point point) {
		for (int i = 0; i < vp; i++) {
			if(point.compareTo(visitedPoints[i]) == 0)
				return true;
		}
		return false;
	}

	/*
	 * Finds and print points collinear to refPoint.*/
	private void collinearToRefPoint(Point refPoint, Point[] p) {
		Point[] chosenPoints = new Point[4];
		for (int i = 0; i+2 < p.length; i++) {
			chosenPoints[0] = refPoint;
			chosenPoints[1] = p[i];		//select 3 adjacent points to check their slope
			chosenPoints[2] = p[i + 1];
			chosenPoints[3] = p[i + 2];
			if (isSlopeEqual(chosenPoints)) {
				Insertion.sort(chosenPoints);
				chosenPoints[0].drawTo(chosenPoints[3]);			//draw line segment
				StdOut.println(chosenPoints[0]+" -> "+chosenPoints[1]+" -> "+chosenPoints[2]+" -> "+chosenPoints[3]);
				markVisited(chosenPoints);
				i += 2;					//jump to next 3 adjacent points
			}
		}
	}
	
	/*
	 * Save points to visited arrays which are drawn on screen.*/
	private void markVisited(Point[] p) {
		for (int i = 0; i < p.length; i++) {
			visitedPoints[vp++] = p[i];
		}
	}

	/*
	 * @return true if slope of 4 points are equal.
	 */
	private boolean isSlopeEqual(Point[] p) {
		double s1 = p[0].slopeTo(p[1]);
		double s2 = p[0].slopeTo(p[2]);
		double s3 = p[0].slopeTo(p[3]);

		if (s1 == s2 && s1 == s3)
			return true;
		return false;
	}
}
