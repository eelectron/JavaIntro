
public class KdTree {
    private static final boolean RED = true;
    private static final boolean BLACK = false;
    
    private static final boolean EVEN = true;
    
    private Node root; // Root of my binary tree
    private int size;  //total nodes in tree

    // Denotes node of tree
    private class Node {
        private Point2D point; // Data of node
        private boolean evenLevel;  //indicate whether a node is at even(0,2,4) level or odd(1,3,5).
        private RectHV rect;
        private boolean color = RED; // Color of this node
        
        private Node left; // Pointer to left node
        private Node right;

        Node(Point2D p, boolean e, RectHV r) {
            point = p;
            evenLevel = e;
            rect = r;
        }
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public int size() {
        return size;
    }
    
    //***************************************Inserting a NODe************************************
    public void insert(Point2D p) {
        root = put(root, p, EVEN);
    }
    

    private Node put(Node h, Point2D p, boolean e) {
        // Insert the node
        if (h == null){
            size++;     //increment size of tree by one 
            return new Node(p, e);
        }
        
        //don't insert duplicate points
        if(p.equals(h.point) == true)return null;
        
        int cmp;
        if(h.evenLevel == EVEN)
            cmp = Point2D.X_ORDER.compare(p, h.point);
        else
            cmp = Point2D.Y_ORDER.compare(p, h.point);
        
        if (cmp < 0)
            h.left = put(h.left, p, !h.evenLevel);
        else
            h.right = put(h.right, p, !h.evenLevel);
        

        // Rotate if satisfies below condition
        if (!isRed(h.left) && isRed(h.right))
            h = rotateLeft(h);
        else if (isRed(h.left) && isRed(h.left.left))
            h = rotateRight(h);
        else if (isRed(h.left) && isRed(h.right))
            flipColors(h);
        return h;
    }

    // Checks for redness of a node
    private boolean isRed(Node x) {
        if (x == null)
            return false;
        return x.color == RED;
    }

    // Perform left rotation
    private Node rotateLeft(Node currentNode) {
        assert (isRed(currentNode.right));

        Node newNode = currentNode.right;
        currentNode.right = newNode.left;
        newNode.left = currentNode;
        newNode.color = currentNode.color;
        currentNode.color = RED;
        return newNode;
    }

    // Perform right rotation
    private Node rotateRight(Node currentNode) {
        assert (isRed(currentNode.left));

        Node newNode = currentNode.left;
        currentNode.left = newNode.right;
        newNode.right = currentNode;
        newNode.color = currentNode.color;
        currentNode.color = RED;
        return newNode;
    }

    private void flipColors(Node h) {
        assert (!isRed(h));
        assert (isRed(h.left));
        assert (isRed(h.right));

        h.color = RED;
        h.left.color = BLACK;
        h.right.color = BLACK;
    }
    
    //*****************************************************************************************************
    public boolean contains(Point2D p){
        Node curNode = root;
        int cmp;
        while(curNode != null){
            if(curNode.evenLevel == EVEN)
                cmp = Point2D.X_ORDER.compare(p, curNode.point);  
            else
                cmp = Point2D.Y_ORDER.compare(p, curNode.point);
            
            
            if (cmp < 0)
                curNode = curNode.left;
            else if(cmp > 0)
                curNode = curNode.right;
            else if(p.equals(curNode.point))        //FOUND :)
                return true;
            else if(cmp == 0 && !p.equals(curNode.point))   //means our point 'p' lies on same vertical or horizontal
                curNode = curNode.right;                    //which passes through current point !    
        }
        return false;
    }
    
    public void draw(){
        RectHV rect = new RectHV(0, 0, 1, 1);
        rect.draw();
        draw(root, rect);
    }

    private void draw(Node node, RectHV rect) {
        if(node  == null)return;
        
        //draw point
        Point2D p = node.point;
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.setPenRadius(.01);
        p.draw();
        
        double x = p.x();
        double y = p.y();
        //draw line
        if(node.evenLevel == EVEN){     //draw vertical line
            StdDraw.setPenColor(StdDraw.RED);
            StdDraw.setPenRadius();
            //override xmin,xmax
            StdDraw.line(x, rect.ymin(), x, rect.ymax());
            
            //recursively draw points in left plane
            RectHV rectLeft = new RectHV(rect.xmin(), rect.ymin(), x, rect.ymax());
            draw(node.left, rectLeft);
            
            //recursively draw points present in right plane
            RectHV rectRight = new RectHV(x, rect.ymin(), rect.xmax(), rect.ymax());
            draw(node.right, rectRight);
        }else{                          //draw horizontal line
            StdDraw.setPenColor(StdDraw.BLUE);
            StdDraw.setPenRadius();
            StdDraw.line(rect.xmin(), y, rect.xmax(), y);
            
            //draw points in bottom plane
            RectHV rectBottom = new RectHV(rect.xmin(), rect.ymin(), rect.xmax(), y);
            draw(node.left, rectBottom);
            
            //draw points in top plane
            RectHV rectTop = new RectHV(rect.xmin(), y, rect.xmax(), rect.ymax());
            draw(node.right, rectTop);
        }
    }
    
    
    public static void main(String[] args) {
        String filename = args[0];
        In in = new In(filename);

        StdDraw.show(0);
     // initialize the data structures with N points from standard input
//        PointSET brute = new PointSET();
        KdTree kdtree = new KdTree();
        while (!in.isEmpty()) {
            double x = in.readDouble();
            double y = in.readDouble();
            Point2D p = new Point2D(x, y);
            kdtree.insert(p);
//            brute.insert(p);
        }
        

        // draw the points
        StdDraw.clear();
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.setPenRadius(.01);
        kdtree.draw();
        
        StdDraw.show(50);
    }
}