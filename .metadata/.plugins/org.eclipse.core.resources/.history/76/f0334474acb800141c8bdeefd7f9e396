/*************************************************************************
 * Name: Prashant Singh
 * Email: prashantfromindia@gmail.com
 *
 * Compilation:  javac Fast.java
 * Execution:	 java Fast rs1423.txt	
 * Dependencies: Point.java,StdDraw.java
 *
 * Description: This program finds collinear points among a given set of N points
 * and print them on screen.Its worst case running time is O(N^2logN).
 *
 *************************************************************************/
import java.util.Arrays;
public class Fast {
	private Point[] points;
	private Point[] pointsHelper;
	private int pointCount;
	private Point[] visitedPoints; // mark visited points
	private int vp = 0; // count visited points
	private Point[] sortPoint = new Point[4];
	public static void main(String[] args) {
		Fast f = new Fast();
		// rescale coordinates and turn on animation mode
		StdDraw.setXscale(0, 32768);
		StdDraw.setYscale(0, 32768);
		StdDraw.show(0);

		f.init(args[0]); // initialize points[] array with points
		f.start();

		StdDraw.show(0); // display all points on screen
	}

	/*
	 * Reads all the points from given text file and initialize the points[].
	 */
	private void init(String fileName) {
		In in = new In(fileName); // read x,y from file
		pointCount = in.readInt(); // total points
		points = new Point[pointCount]; // stores all points
		visitedPoints = new Point[pointCount];
		pointsHelper = new Point[pointCount];
		for (int i = 0; i < points.length; i++) {
			int x = in.readInt();
			int y = in.readInt();
			points[i] = new Point(x, y);
			pointsHelper[i] = new Point(x, y);

			// draw every point on screen
			points[i].draw();
		}
		Arrays.sort(points);
	}

	/*
	 * Start finding collinear points to each point in points[]. This method
	 * uses Arrays.sort() whose O(NlogN) unlike Insertion.sort() whose O(N^2).
	 */
	private void start() {
		for (int i = 0; i < points.length; i++) {
			if (!isVisited(points[i])) {
				// sort pointshelper based on slope with points[i]
				Arrays.sort(pointsHelper, points[i].SLOPE_ORDER);

				// find points collinear to points[i]
				collinearToRefPoint(points[i], pointsHelper);
			}
		}
	}

	/*
	 * Finds and print points collinear to refPoint.
	 */
	private void collinearToRefPoint(Point refPoint, Point[] p) {
		for (int i = 0; i + 2 < p.length; i++) {
			if (isCollinear(refPoint, p[i], p[i + 1], p[i + 2])) {
				sortPoint[0] = refPoint;
				sortPoint[1] = p[i];
				sortPoint[2] = p[i + 1];
				sortPoint[3] = p[i + 2];

				// sort it
				Insertion.sort(sortPoint);

				
				// print on stdout
				printLineSegment(sortPoint);

				// print on screen
				sortPoint[0].drawTo(sortPoint[3]);

				// mark visited
				markVisited(sortPoint);
				

			}
		}
	}

	/*
	 * Prints a line segment on StdOut
	 */
	private void printLineSegment(Point[] p) {
		int i = 0;
		for (i = 0; i + 1 < p.length; i++) {
			StdOut.print(p[i] + " -> ");
		}
		StdOut.println(p[i]);
	}

	/*
	 * @return true if three points are collinear.
	 */
	private boolean isCollinear(Point point, Point point2, Point point3,
			Point p3) {
		double s1 = point.slopeTo(point2);
		double s2 = point.slopeTo(point3);
		double s3 = point.slopeTo(p3);
		if (s1 == s2 && s1 == s3)
			return true;
		return false;
	}

	/*
	 * Once a point drawn on line segment then put it in visited list .
	 */
	private void markVisited(Point[] p) {
		for (int i = 0; i < 4; i++) {
			if (!isVisited(p[i]))
				visitedPoints[vp++] = p[i];
		}
	}

	/*
	 * @return true if given point is already considered.
	 */
	private boolean isVisited(Point point) {
		for (int i = 0; i < vp; i++) {
			if (point.compareTo(visitedPoints[i]) == 0)
				return true;
		}
		return false;
	}
}